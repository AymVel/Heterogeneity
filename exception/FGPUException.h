
 /**
 * \brief     FGPUException.cpp
 * \details   Provides consistent interface to handle errors through the throw expression. All exceptions generated by the standard library inherit from FGPUException.
 * \authors{}
 * \note      The Javadoc style was used. The JAVADOC_AUTOBRIEF should be set to yes
 * \version
 * \date      2016 - ..
 * \bug
 * \warning
 * \copyright
 * Created on: 09 Dec 2016
 */

#include <string>
#include <iostream>
#include <exception>

using namespace std;

/*! Class for unknown exceptions thrown*/
class UnknownError {};


/*! Base class for exceptions thrown */
class FGPUException//: public exception
{
public:
      /**
       * A constructor
       * @brief Constructs the FGPUException object
       */
    FGPUException() {};

      /**
       * A destructor.
       * @brief Destroys the FGPUException object
       */
    ~FGPUException() {};

     /**
     * @brief Returns the explanatory string
     * @param none
     * @return Pointer to a null-terminated string with explanatory information. The pointer is guaranteed to be valid at least until the exception object from which it is obtained is destroyed, or until a non-const member function on the FGPUException object is called.
     */
    virtual const char *what() const
    {
        return "Unknown Error Message";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid input file. Situations where the input file does not exist or cannot be read by the program.
*/
class InvalidInputFile: public FGPUException
{
public:
InvalidInputFile():FGPUException(){}
     /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
        return "Invalid Input File";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It is used to report errors when hash list is full.
*/
class InvalidHashList : public FGPUException
{
public:
InvalidHashList():FGPUException(){}
     /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
        return "Hash list full. This should never happen";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid agent variable type. This could happen when retriving or setting a variable of differet type.
*/
class InvalidVarType : public FGPUException
{
public:
InvalidVarType():FGPUException(){}
     /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
      return "Bad variable type in agent instance set/get variable";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid agent state name.
*/
class InvalidStateName : public FGPUException
{
public:
InvalidStateName():FGPUException(){}
     /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
      return "Invalid agent state name";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid map entry.
*/
class InvalidMapEntry : public FGPUException
{
public:
InvalidMapEntry():FGPUException(){}
     /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
       return "Missing entry in type sizes map. Something went bad.";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid agent memory variable type.
*/
class InvalidAgentVar : public FGPUException
{
public:
 InvalidAgentVar():FGPUException(){}
      /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
       return "Invalid agent memory variable";
    }
};


/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid CUDA agent variable.
*/
class InvalidCudaAgent: public FGPUException
{
public:
 InvalidCudaAgent():FGPUException(){}
      /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
       return "CUDA agent not found. This should not happen";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid CUDA agent map size (i.e.map size is qual to zero).
*/
class InvalidCudaAgentMapSize : public FGPUException
{
public:
 InvalidCudaAgentMapSize():FGPUException(){}
      /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
        return "CUDA agent map size is zero";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid CUDA agent description.
*/
class InvalidCudaAgentDesc : public FGPUException
{
public:
 InvalidCudaAgentDesc():FGPUException(){}
      /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
        return "CUDA Agent uses different agent description";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid agent variable type. This could happen when retriving or setting a variable of differet type.
*/
class InvalidAgentFunc : public FGPUException
{
public:
 InvalidAgentFunc():FGPUException(){}
      /**
     * @brief Returns the explanatory string
     * @see FGPUException.what()
     */
virtual const char *what() const
    {
        return "Unknown agent function";
    }
};

/**
* Defines a type of object to be thrown as exception.
* It reports errors that are due to invalid function layer index.
*/
class InvalidFuncLayerIndx : public FGPUException
{
public:
 InvalidFuncLayerIndx():FGPUException(){}
virtual const char *what() const
    {
        return "Agent function layer index out of bounds!";
    }
};
